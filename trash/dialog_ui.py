# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QDialog, QTableWidgetItem
from qfluentwidgets import PixmapLabel, PrimaryPushButton, TableWidget


class MyDialog(QDialog):
    yesSignal = pyqtSignal()
    cancelSignal = pyqtSignal()

    def __init__(self, headers, data, db, parent=None):
        super().__init__(parent=parent)
        self.headers = headers
        self.data = data
        self.db = db
        self.setupUi()
        self.binding_click_button()

    def setupUi(self):
        self.resize(960, 700)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setObjectName("gridLayout")

        self.table = TableWidget(self)
        self.table.setObjectName("table")

        self.table.setColumnCount(len(self.headers))
        self.table.setRowCount(min(len(self.data), 20))
        self.load_data()
        self.table.resizeColumnsToContents()
        self.gridLayout.addWidget(self.table, 0, 0, 4, 2)

        self.wordcloud = PrimaryPushButton(self)
        self.wordcloud.setObjectName("wordcloud")
        self.gridLayout.addWidget(self.wordcloud, 0, 2, 1, 1)

        self.timeline_analysis = PrimaryPushButton(self)
        self.timeline_analysis.setObjectName("timeline_analysis")
        self.gridLayout.addWidget(self.timeline_analysis, 1, 2, 1, 1)

        self.gender_analysis = PrimaryPushButton(self)
        self.gender_analysis.setObjectName("gender_analysis")
        self.gridLayout.addWidget(self.gender_analysis, 2, 2, 1, 1)

        self.city_hot = PrimaryPushButton(self)
        self.city_hot.setObjectName("city_hot")
        self.gridLayout.addWidget(self.city_hot, 3, 2, 1, 1)

        self.save_to_database = PrimaryPushButton(self)
        self.save_to_database.setObjectName("save_to_database")
        self.gridLayout.addWidget(self.save_to_database, 4, 0, 1, 1)

        self.cancle = PrimaryPushButton(self)
        self.cancle.setObjectName("cancle")
        self.gridLayout.addWidget(self.cancle, 4, 1, 1, 1)

        self.show_label = PixmapLabel(self)
        self.show_label.setObjectName("show_label")
        self.gridLayout.addWidget(self.show_label, 0, 3, 4, 1)

        self.gridLayout.setColumnStretch(0, 2)
        self.gridLayout.setColumnStretch(1, 2)
        self.gridLayout.setColumnStretch(2, 1)
        self.gridLayout.setColumnStretch(3, 4)
        self.gridLayout.setRowStretch(0, 2)
        self.gridLayout.setRowStretch(1, 2)
        self.gridLayout.setRowStretch(2, 2)
        self.gridLayout.setRowStretch(3, 2)
        self.gridLayout.setRowStretch(4, 1)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.wordcloud.setText(_translate("self", "词云分析"))
        self.timeline_analysis.setText(_translate("self", "时间线统计"))
        self.gender_analysis.setText(_translate("self", "性别比例分析"))
        self.city_hot.setText(_translate("self", "城市热力图"))
        self.save_to_database.setText(_translate("self", "保存到数据库"))
        self.cancle.setText(_translate("self", "退出"))

    def load_data(self):
        cols = len(self.headers)
        rows = min(len(self.data), 20)
        self.table.setHorizontalHeaderLabels(self.headers)
        for i in range(rows):
            row = self.data[i]
            for j in range(cols):
                Item = QTableWidgetItem(str(row[self.headers[j]]))
                self.table.setItem(i, j, Item)

    def binding_click_button(self):
        self.wordcloud.clicked.connect(self._wordcloud)
        self.gender_analysis.clicked.connect(self._gender_analysis)
        self.city_hot.clicked.connect(self._city_hot)
        self.timeline_analysis.clicked.connect(self._timeline_analysis)
        if self.db != None:
            self.save_to_database.clicked.connect(self._save_to_database)
        else:
            self.save_to_database.setEnabled(False)
        self.cancle.clicked.connect(self._cancle)

    def _wordcloud(self):

        pass

    def _gender_analysis(self):
        pass

    def _city_hot(self):
        pass

    def _timeline_analysis(self):
        pass

    def _save_to_database(self):

        self.accept()
        self.yesSignal.emit()
        pass

    def _cancle(self):
        self.reject()
        self.cancelSignal.emit()
        pass
